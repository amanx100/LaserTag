
laser_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000082  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000d6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001b2  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e5  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000014e  00000000  00000000  000003bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018e  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000090  00000000  00000000  000006be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	24 c0       	rjmp	.+72     	; 0x7e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB = (1<<PB0)|(1<<PB1);
  38:	83 e0       	ldi	r24, 0x03	; 3
  3a:	87 bb       	out	0x17, r24	; 23
	DDRC &= ~(1<<PC5); 
  3c:	a5 98       	cbi	0x14, 5	; 20
	
    while(1)
    {
		if (PINC & (1<<PC5))
  3e:	9d 9b       	sbis	0x13, 5	; 19
  40:	19 c0       	rjmp	.+50     	; 0x74 <__SREG__+0x35>
		{
			PORTB |= (1<<PB0)|(1<<PB1);
  42:	88 b3       	in	r24, 0x18	; 24
  44:	83 60       	ori	r24, 0x03	; 3
  46:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  48:	2f e3       	ldi	r18, 0x3F	; 63
  4a:	8b ed       	ldi	r24, 0xDB	; 219
  4c:	92 e0       	ldi	r25, 0x02	; 2
  4e:	21 50       	subi	r18, 0x01	; 1
  50:	80 40       	sbci	r24, 0x00	; 0
  52:	90 40       	sbci	r25, 0x00	; 0
  54:	e1 f7       	brne	.-8      	; 0x4e <__SREG__+0xf>
  56:	00 c0       	rjmp	.+0      	; 0x58 <__SREG__+0x19>
  58:	00 00       	nop
			_delay_ms(117);
			PORTB &= ~(1<<PB0);
  5a:	c0 98       	cbi	0x18, 0	; 24
  5c:	2f eb       	ldi	r18, 0xBF	; 191
  5e:	8e e8       	ldi	r24, 0x8E	; 142
  60:	95 e1       	ldi	r25, 0x15	; 21
  62:	21 50       	subi	r18, 0x01	; 1
  64:	80 40       	sbci	r24, 0x00	; 0
  66:	90 40       	sbci	r25, 0x00	; 0
  68:	e1 f7       	brne	.-8      	; 0x62 <__SREG__+0x23>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <__SREG__+0x2d>
  6c:	00 00       	nop
			_delay_ms(883);
			PORTB &= ~(1<<PB1);
  6e:	c1 98       	cbi	0x18, 1	; 24
			while(PINC & (1<<PC5));
  70:	9d 99       	sbic	0x13, 5	; 19
  72:	fe cf       	rjmp	.-4      	; 0x70 <__SREG__+0x31>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	2a e1       	ldi	r18, 0x1A	; 26
  76:	2a 95       	dec	r18
  78:	f1 f7       	brne	.-4      	; 0x76 <__SREG__+0x37>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <__SREG__+0x3d>
  7c:	e0 cf       	rjmp	.-64     	; 0x3e <__SP_H__>

0000007e <_exit>:
  7e:	f8 94       	cli

00000080 <__stop_program>:
  80:	ff cf       	rjmp	.-2      	; 0x80 <__stop_program>
