
firmware_laser_tag.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000282  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000318  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000418  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013b  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020e  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001dd  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003da  00000000  00000000  00000d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001153  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_2>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  8a:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
#include <util/delay.h>

uint8_t INP=0, LED_LATCH=0, SHTP=1;

ISR(INT0_vect) //if he get shot by back side
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	INP = SHOTED_B;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 63 00 	sts	0x0063, r24
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <__vector_2>:

ISR(INT1_vect) //if he get shot by front side
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
	INP = SHOTED_F;
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	80 93 63 00 	sts	0x0063, r24
}
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_3>:

ISR(INT2_vect) // request to permit shoot
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	INP = SHOT_RQST;
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	80 93 63 00 	sts	0x0063, r24
	if (SHTP==OFF)
  e4:	80 91 60 00 	lds	r24, 0x0060
  e8:	81 11       	cpse	r24, r1
  ea:	1f c0       	rjmp	.+62     	; 0x12a <__vector_3+0x5c>
	{
		BEEP_ON;
  ec:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	80 e7       	ldi	r24, 0x70	; 112
  f2:	92 e0       	ldi	r25, 0x02	; 2
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__vector_3+0x26>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <__vector_3+0x30>
  fe:	00 00       	nop
		_delay_ms(100);
		BEEP_OFF;
 100:	c0 98       	cbi	0x18, 0	; 24
 102:	2f e7       	ldi	r18, 0x7F	; 127
 104:	88 e3       	ldi	r24, 0x38	; 56
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <__vector_3+0x3a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <__vector_3+0x44>
 112:	00 00       	nop
		_delay_ms(50);
		BEEP_ON;
 114:	c0 9a       	sbi	0x18, 0	; 24
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	80 e7       	ldi	r24, 0x70	; 112
 11a:	92 e0       	ldi	r25, 0x02	; 2
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <__vector_3+0x4e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <__vector_3+0x58>
 126:	00 00       	nop
		_delay_ms(100);
		BEEP_OFF;
 128:	c0 98       	cbi	0x18, 0	; 24
	}
}
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
	if (LED_LATCH)
 146:	80 91 62 00 	lds	r24, 0x0062
 14a:	88 23       	and	r24, r24
 14c:	29 f0       	breq	.+10     	; 0x158 <__vector_7+0x1e>
	{
		LED_B_OFF;
 14e:	94 98       	cbi	0x12, 4	; 18
		LED_A_ON;
 150:	95 9a       	sbi	0x12, 5	; 18
		LED_LATCH=0;
 152:	10 92 62 00 	sts	0x0062, r1
 156:	05 c0       	rjmp	.+10     	; 0x162 <__vector_7+0x28>
	}
	else
	{
		LED_A_OFF;
 158:	95 98       	cbi	0x12, 5	; 18
		LED_B_ON;
 15a:	94 9a       	sbi	0x12, 4	; 18
		LED_LATCH=1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 62 00 	sts	0x0062, r24
	}
}
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <main>:

int main(void)
{
	DDRB = 0x01;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x03;
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	84 bb       	out	0x14, r24	; 20
	DDRD = (1<<4)|(1<<5)|(1<<6)|(1<<7);
 176:	80 ef       	ldi	r24, 0xF0	; 240
 178:	81 bb       	out	0x11, r24	; 17

	// Clock value: 7.813 kHz
	// Mode: Normal top=FFFFh
	// Compare A Match Interrupt: On
	TCCR1A=0x00;
 17a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x0D;
 17c:	8d e0       	ldi	r24, 0x0D	; 13
 17e:	8e bd       	out	0x2e, r24	; 46
	OCR1A=3907;
 180:	83 e4       	ldi	r24, 0x43	; 67
 182:	9f e0       	ldi	r25, 0x0F	; 15
 184:	9b bd       	out	0x2b, r25	; 43
 186:	8a bd       	out	0x2a, r24	; 42

	GICR |= (1<<INT0)|(1<<INT1)|(1<<INT2);
 188:	8b b7       	in	r24, 0x3b	; 59
 18a:	80 6e       	ori	r24, 0xE0	; 224
 18c:	8b bf       	out	0x3b, r24	; 59
	MCUCSR &= ~(1<<ISC2);					// falling edge
 18e:	84 b7       	in	r24, 0x34	; 52
 190:	8f 7b       	andi	r24, 0xBF	; 191
 192:	84 bf       	out	0x34, r24	; 52
	MCUCR |= (1<<ISC01)|(1<<ISC11);	//falling edge
 194:	85 b7       	in	r24, 0x35	; 53
 196:	8a 60       	ori	r24, 0x0A	; 10
 198:	85 bf       	out	0x35, r24	; 53
	GIFR = (1<<INTF0)|(1<<INTF1)|(INTF2);
 19a:	85 ec       	ldi	r24, 0xC5	; 197
 19c:	8a bf       	out	0x3a, r24	; 58
	
	TIMSK=0x10;
 19e:	80 e1       	ldi	r24, 0x10	; 16
 1a0:	89 bf       	out	0x39, r24	; 57
	
	sei();	//Global Interrupt enable
 1a2:	78 94       	sei
			SHTP=OFF;
			_delay_ms(250);
			GL_OFF;
			BEEP_OFF;
			_delay_ms(9550);
			SHTP=ON;
 1a4:	91 e0       	ldi	r25, 0x01	; 1
	
	sei();	//Global Interrupt enable
	
    while(1)
    {
		if (INP==SHOTED_B)
 1a6:	80 91 63 00 	lds	r24, 0x0063
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	41 f5       	brne	.+80     	; 0x1fe <main+0x90>
		{
			GL_ON;
 1ae:	a9 9a       	sbi	0x15, 1	; 21
			BEEP_ON;
 1b0:	c0 9a       	sbi	0x18, 0	; 24
			LED_FRZ_ON;
 1b2:	96 9a       	sbi	0x12, 6	; 18
			SHTP=OFF;
 1b4:	10 92 60 00 	sts	0x0060, r1
 1b8:	2f e7       	ldi	r18, 0x7F	; 127
 1ba:	3a e1       	ldi	r19, 0x1A	; 26
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	30 40       	sbci	r19, 0x00	; 0
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x50>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x5a>
 1c8:	00 00       	nop
			_delay_ms(250);
			GL_OFF;
 1ca:	a9 98       	cbi	0x15, 1	; 21
			BEEP_OFF;
 1cc:	c0 98       	cbi	0x18, 0	; 24
 1ce:	2f e7       	ldi	r18, 0x7F	; 127
 1d0:	35 e1       	ldi	r19, 0x15	; 21
 1d2:	8f e6       	ldi	r24, 0x6F	; 111
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	30 40       	sbci	r19, 0x00	; 0
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x66>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x70>
 1de:	00 00       	nop
			_delay_ms(4550);
			SHTP=ON;
 1e0:	90 93 60 00 	sts	0x0060, r25
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	31 ee       	ldi	r19, 0xE1	; 225
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	30 40       	sbci	r19, 0x00	; 0
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x7c>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0x86>
 1f4:	00 00       	nop
			_delay_ms(200);
			LED_FRZ_OFF;
 1f6:	96 98       	cbi	0x12, 6	; 18
			INP = NT;
 1f8:	10 92 63 00 	sts	0x0063, r1
 1fc:	3b c0       	rjmp	.+118    	; 0x274 <main+0x106>
		}
		else if (INP==SHOTED_F)
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	41 f5       	brne	.+80     	; 0x252 <main+0xe4>
		{
			GL_ON;
 202:	a9 9a       	sbi	0x15, 1	; 21
			BEEP_ON;
 204:	c0 9a       	sbi	0x18, 0	; 24
			LED_FRZ_ON;
 206:	96 9a       	sbi	0x12, 6	; 18
			SHTP=OFF;
 208:	10 92 60 00 	sts	0x0060, r1
 20c:	2f e7       	ldi	r18, 0x7F	; 127
 20e:	3a e1       	ldi	r19, 0x1A	; 26
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	21 50       	subi	r18, 0x01	; 1
 214:	30 40       	sbci	r19, 0x00	; 0
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0xa4>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0xae>
 21c:	00 00       	nop
			_delay_ms(250);
			GL_OFF;
 21e:	a9 98       	cbi	0x15, 1	; 21
			BEEP_OFF;
 220:	c0 98       	cbi	0x18, 0	; 24
 222:	2f e7       	ldi	r18, 0x7F	; 127
 224:	37 e2       	ldi	r19, 0x27	; 39
 226:	89 ee       	ldi	r24, 0xE9	; 233
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	30 40       	sbci	r19, 0x00	; 0
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0xba>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0xc4>
 232:	00 00       	nop
			_delay_ms(9550);
			SHTP=ON;
 234:	90 93 60 00 	sts	0x0060, r25
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	31 ee       	ldi	r19, 0xE1	; 225
 23c:	84 e0       	ldi	r24, 0x04	; 4
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	30 40       	sbci	r19, 0x00	; 0
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0xd0>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0xda>
 248:	00 00       	nop
			_delay_ms(200);
			LED_FRZ_OFF;
 24a:	96 98       	cbi	0x12, 6	; 18
			INP = NT;
 24c:	10 92 63 00 	sts	0x0063, r1
 250:	11 c0       	rjmp	.+34     	; 0x274 <main+0x106>
		}
		else if (INP==SHOT_RQST)
 252:	83 30       	cpi	r24, 0x03	; 3
 254:	79 f4       	brne	.+30     	; 0x274 <main+0x106>
		{
			INP = NT;
 256:	10 92 63 00 	sts	0x0063, r1
			SHOOT_P_ON;
 25a:	97 9a       	sbi	0x12, 7	; 18
			GK_ON;
 25c:	a8 9a       	sbi	0x15, 0	; 21
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	31 ee       	ldi	r19, 0xE1	; 225
 262:	84 e0       	ldi	r24, 0x04	; 4
 264:	21 50       	subi	r18, 0x01	; 1
 266:	30 40       	sbci	r19, 0x00	; 0
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0xf6>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x100>
 26e:	00 00       	nop
			_delay_ms(200);
			SHOOT_P_OFF;
 270:	97 98       	cbi	0x12, 7	; 18
			GK_OFF;
 272:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	2a e1       	ldi	r18, 0x1A	; 26
 276:	2a 95       	dec	r18
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0x108>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x10e>
 27c:	94 cf       	rjmp	.-216    	; 0x1a6 <main+0x38>

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
