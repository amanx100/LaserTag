
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  0000049c  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006ae  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ec  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000266  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000009c  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e3  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000041b  00000000  00000000  00001387  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  000017a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3d       	cpi	r26, 0xD8	; 216
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 81 00 	call	0x102	; 0x102 <main>
  7a:	0c 94 4c 02 	jmp	0x498	; 0x498 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <usart_init>:
#include <string.h>

void usart_init(uint32_t baud)
{
	// Calculation for baud rate value into ubrr value
	uint16_t ubrr = lrint(( F_CPU / (16L * baud) ) - 1);
  82:	dc 01       	movw	r26, r24
  84:	cb 01       	movw	r24, r22
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	aa 1f       	adc	r26, r26
  8c:	bb 1f       	adc	r27, r27
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	aa 1f       	adc	r26, r26
  94:	bb 1f       	adc	r27, r27
  96:	9c 01       	movw	r18, r24
  98:	ad 01       	movw	r20, r26
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	44 1f       	adc	r20, r20
  a0:	55 1f       	adc	r21, r21
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	44 1f       	adc	r20, r20
  a8:	55 1f       	adc	r21, r21
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	72 e1       	ldi	r23, 0x12	; 18
  ae:	8a e7       	ldi	r24, 0x7A	; 122
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 2a 02 	call	0x454	; 0x454 <__udivmodsi4>
  b6:	ca 01       	movw	r24, r20
  b8:	b9 01       	movw	r22, r18
  ba:	61 50       	subi	r22, 0x01	; 1
  bc:	71 09       	sbc	r23, r1
  be:	81 09       	sbc	r24, r1
  c0:	91 09       	sbc	r25, r1
  c2:	0e 94 8a 01 	call	0x314	; 0x314 <__floatunsisf>
  c6:	0e 94 c7 01 	call	0x38e	; 0x38e <lrint>
	// Set baud rate
	UBRRH = (uint8_t)(ubrr>>8);
  ca:	27 2f       	mov	r18, r23
  cc:	33 27       	eor	r19, r19
  ce:	20 bd       	out	0x20, r18	; 32
	UBRRL = (uint8_t)ubrr;
  d0:	69 b9       	out	0x09, r22	; 9
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN);
  d2:	88 e1       	ldi	r24, 0x18	; 24
  d4:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 1stop bit
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  d6:	86 e8       	ldi	r24, 0x86	; 134
  d8:	80 bd       	out	0x20, r24	; 32
  da:	08 95       	ret

000000dc <usart_putchar>:
}

void usart_putchar(char data)
{
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <usart_putchar>
	// Start transmission
	UDR = data;
  e0:	8c b9       	out	0x0c, r24	; 12
  e2:	08 95       	ret

000000e4 <usart_putstr>:
	// Return the data
	return UDR;
}

void usart_putstr(char *s)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
	// loop through entire string
	while (*s) {
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	31 f0       	breq	.+12     	; 0xfc <usart_putstr+0x18>
  f0:	21 96       	adiw	r28, 0x01	; 1
		usart_putchar(*s);
  f2:	0e 94 6e 00 	call	0xdc	; 0xdc <usart_putchar>
}

void usart_putstr(char *s)
{
	// loop through entire string
	while (*s) {
  f6:	89 91       	ld	r24, Y+
  f8:	81 11       	cpse	r24, r1
  fa:	fb cf       	rjmp	.-10     	; 0xf2 <usart_putstr+0xe>
		usart_putchar(*s);
		s++;
	}
}
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <main>:
#include "myusart.h"

int main(void)
{
	uint8_t transmission=0;
	DDRA = 0x00;
 102:	1a ba       	out	0x1a, r1	; 26
	
	//unused pin assigned as output.. // make it input when need
	DDRB = 0x0F;
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
 108:	18 ba       	out	0x18, r1	; 24
	DDRC = 0xFF;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 10e:	15 ba       	out	0x15, r1	; 21
	///////////////////
	
	usart_init(14400);
 110:	60 e4       	ldi	r22, 0x40	; 64
 112:	78 e3       	ldi	r23, 0x38	; 56
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 41 00 	call	0x82	; 0x82 <usart_init>
#include <util/delay.h>
#include "myusart.h"

int main(void)
{
	uint8_t transmission=0;
 11c:	80 e0       	ldi	r24, 0x00	; 0
				}
				else
				{
					usart_putstr("120-\r");
				}
				transmission=0;
 11e:	c0 e0       	ldi	r28, 0x00	; 0
			}
		}
		else
		{
			transmission=1;
 120:	d1 e0       	ldi	r29, 0x01	; 1
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0x24>
 124:	8d 2f       	mov	r24, r29
	
	usart_init(14400);
	
    while(1)
    {
        if (PINA_0)
 126:	c8 9b       	sbis	0x19, 0	; 25
 128:	16 c0       	rjmp	.+44     	; 0x156 <main+0x54>
        {
			if (transmission)
 12a:	88 23       	and	r24, r24
 12c:	e1 f3       	breq	.-8      	; 0x126 <main+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f e1       	ldi	r24, 0x1F	; 31
 130:	9e e4       	ldi	r25, 0x4E	; 78
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x30>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x36>
 138:	00 00       	nop
			{
				_delay_ms(10);
				if (PINA_1)
 13a:	c9 9b       	sbis	0x19, 1	; 25
 13c:	06 c0       	rjmp	.+12     	; 0x14a <main+0x48>
				{
					usart_putstr("111+\r");
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				else
				{
					usart_putstr("111-\r");
				}
				transmission=0;
 146:	8c 2f       	mov	r24, r28
 148:	ee cf       	rjmp	.-36     	; 0x126 <main+0x24>
				{
					usart_putstr("111+\r");
				}
				else
				{
					usart_putstr("111-\r");
 14a:	86 e6       	ldi	r24, 0x66	; 102
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				transmission=0;
 152:	8c 2f       	mov	r24, r28
 154:	e8 cf       	rjmp	.-48     	; 0x126 <main+0x24>
			}
        }
		else if (PINA_2)
 156:	ca 9b       	sbis	0x19, 2	; 25
 158:	16 c0       	rjmp	.+44     	; 0x186 <main+0x84>
		{
			if (transmission)
 15a:	88 23       	and	r24, r24
 15c:	21 f3       	breq	.-56     	; 0x126 <main+0x24>
 15e:	8f e1       	ldi	r24, 0x1F	; 31
 160:	9e e4       	ldi	r25, 0x4E	; 78
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x60>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x66>
 168:	00 00       	nop
			{
				_delay_ms(10);
				if (PINA_3)
 16a:	cb 9b       	sbis	0x19, 3	; 25
 16c:	06 c0       	rjmp	.+12     	; 0x17a <main+0x78>
				{
					usart_putstr("112+\r");
 16e:	8c e6       	ldi	r24, 0x6C	; 108
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				else
				{
					usart_putstr("112-\r");
				}
				transmission=0;
 176:	8c 2f       	mov	r24, r28
 178:	d6 cf       	rjmp	.-84     	; 0x126 <main+0x24>
				{
					usart_putstr("112+\r");
				}
				else
				{
					usart_putstr("112-\r");
 17a:	82 e7       	ldi	r24, 0x72	; 114
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				transmission=0;
 182:	8c 2f       	mov	r24, r28
 184:	d0 cf       	rjmp	.-96     	; 0x126 <main+0x24>
			}
		}
		else if (PINA_4)
 186:	cc 9b       	sbis	0x19, 4	; 25
 188:	16 c0       	rjmp	.+44     	; 0x1b6 <main+0xb4>
		{
			if (transmission)
 18a:	88 23       	and	r24, r24
 18c:	61 f2       	breq	.-104    	; 0x126 <main+0x24>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x90>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x96>
 198:	00 00       	nop
			{
				_delay_ms(10);
				if (PINA_5)
 19a:	cd 9b       	sbis	0x19, 5	; 25
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <main+0xa8>
				{
					usart_putstr("113+\r");
 19e:	88 e7       	ldi	r24, 0x78	; 120
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				else
				{
					usart_putstr("113-\r");
				}
				transmission=0;
 1a6:	8c 2f       	mov	r24, r28
 1a8:	be cf       	rjmp	.-132    	; 0x126 <main+0x24>
				{
					usart_putstr("113+\r");
				}
				else
				{
					usart_putstr("113-\r");
 1aa:	8e e7       	ldi	r24, 0x7E	; 126
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				transmission=0;
 1b2:	8c 2f       	mov	r24, r28
 1b4:	b8 cf       	rjmp	.-144    	; 0x126 <main+0x24>
			}
		}
		else if (PINA_6)
 1b6:	ce 9b       	sbis	0x19, 6	; 25
 1b8:	17 c0       	rjmp	.+46     	; 0x1e8 <main+0xe6>
		{
			if (transmission)
 1ba:	88 23       	and	r24, r24
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <main+0xbe>
 1be:	b3 cf       	rjmp	.-154    	; 0x126 <main+0x24>
 1c0:	8f e1       	ldi	r24, 0x1F	; 31
 1c2:	9e e4       	ldi	r25, 0x4E	; 78
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0xc2>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0xc8>
 1ca:	00 00       	nop
			{
				_delay_ms(10);
				if (PINA_7)
 1cc:	cf 9b       	sbis	0x19, 7	; 25
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <main+0xda>
				{
					usart_putstr("114+\r");
 1d0:	84 e8       	ldi	r24, 0x84	; 132
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				else
				{
					usart_putstr("114-\r");
				}
				transmission=0;
 1d8:	8c 2f       	mov	r24, r28
 1da:	a5 cf       	rjmp	.-182    	; 0x126 <main+0x24>
				{
					usart_putstr("114+\r");
				}
				else
				{
					usart_putstr("114-\r");
 1dc:	8a e8       	ldi	r24, 0x8A	; 138
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				transmission=0;
 1e4:	8c 2f       	mov	r24, r28
 1e6:	9f cf       	rjmp	.-194    	; 0x126 <main+0x24>
			}
		}
		else if (PINC_7)
 1e8:	9f 9b       	sbis	0x13, 7	; 19
 1ea:	17 c0       	rjmp	.+46     	; 0x21a <main+0x118>
		{
			if (transmission)
 1ec:	88 23       	and	r24, r24
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <main+0xf0>
 1f0:	9a cf       	rjmp	.-204    	; 0x126 <main+0x24>
 1f2:	8f e1       	ldi	r24, 0x1F	; 31
 1f4:	9e e4       	ldi	r25, 0x4E	; 78
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0xf4>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0xfa>
 1fc:	00 00       	nop
			{
				_delay_ms(10);
				if (PINC_6)
 1fe:	9e 9b       	sbis	0x13, 6	; 19
 200:	06 c0       	rjmp	.+12     	; 0x20e <main+0x10c>
				{
					usart_putstr("115+\r");
 202:	80 e9       	ldi	r24, 0x90	; 144
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				else
				{
					usart_putstr("115-\r");
				}
				transmission=0;
 20a:	8c 2f       	mov	r24, r28
 20c:	8c cf       	rjmp	.-232    	; 0x126 <main+0x24>
				{
					usart_putstr("115+\r");
				}
				else
				{
					usart_putstr("115-\r");
 20e:	86 e9       	ldi	r24, 0x96	; 150
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				transmission=0;
 216:	8c 2f       	mov	r24, r28
 218:	86 cf       	rjmp	.-244    	; 0x126 <main+0x24>
			}
		}
		else if (PINC_5)
 21a:	9d 9b       	sbis	0x13, 5	; 19
 21c:	17 c0       	rjmp	.+46     	; 0x24c <main+0x14a>
		{
			if (transmission)
 21e:	88 23       	and	r24, r24
 220:	09 f4       	brne	.+2      	; 0x224 <main+0x122>
 222:	81 cf       	rjmp	.-254    	; 0x126 <main+0x24>
 224:	8f e1       	ldi	r24, 0x1F	; 31
 226:	9e e4       	ldi	r25, 0x4E	; 78
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x126>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x12c>
 22e:	00 00       	nop
			{
				_delay_ms(10);
				if (PINC_4)
 230:	9c 9b       	sbis	0x13, 4	; 19
 232:	06 c0       	rjmp	.+12     	; 0x240 <main+0x13e>
				{
					usart_putstr("116+\r");
 234:	8c e9       	ldi	r24, 0x9C	; 156
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				else
				{
					usart_putstr("116-\r");
				}
				transmission=0;
 23c:	8c 2f       	mov	r24, r28
 23e:	73 cf       	rjmp	.-282    	; 0x126 <main+0x24>
				{
					usart_putstr("116+\r");
				}
				else
				{
					usart_putstr("116-\r");
 240:	82 ea       	ldi	r24, 0xA2	; 162
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				transmission=0;
 248:	8c 2f       	mov	r24, r28
 24a:	6d cf       	rjmp	.-294    	; 0x126 <main+0x24>
			}
		}
		else if (PINC_3)
 24c:	9b 9b       	sbis	0x13, 3	; 19
 24e:	17 c0       	rjmp	.+46     	; 0x27e <main+0x17c>
		{
			if (transmission)
 250:	88 23       	and	r24, r24
 252:	09 f4       	brne	.+2      	; 0x256 <main+0x154>
 254:	68 cf       	rjmp	.-304    	; 0x126 <main+0x24>
 256:	8f e1       	ldi	r24, 0x1F	; 31
 258:	9e e4       	ldi	r25, 0x4E	; 78
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x158>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x15e>
 260:	00 00       	nop
			{
				_delay_ms(10);
				if (PINC_2)
 262:	9a 9b       	sbis	0x13, 2	; 19
 264:	06 c0       	rjmp	.+12     	; 0x272 <main+0x170>
				{
					usart_putstr("117+\r");
 266:	88 ea       	ldi	r24, 0xA8	; 168
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				else
				{
					usart_putstr("117-\r");
				}
				transmission=0;
 26e:	8c 2f       	mov	r24, r28
 270:	5a cf       	rjmp	.-332    	; 0x126 <main+0x24>
				{
					usart_putstr("117+\r");
				}
				else
				{
					usart_putstr("117-\r");
 272:	8e ea       	ldi	r24, 0xAE	; 174
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				transmission=0;
 27a:	8c 2f       	mov	r24, r28
 27c:	54 cf       	rjmp	.-344    	; 0x126 <main+0x24>
			}
		}
		else if (PINC_1)
 27e:	99 9b       	sbis	0x13, 1	; 19
 280:	17 c0       	rjmp	.+46     	; 0x2b0 <main+0x1ae>
		{
			if (transmission)
 282:	88 23       	and	r24, r24
 284:	09 f4       	brne	.+2      	; 0x288 <main+0x186>
 286:	4f cf       	rjmp	.-354    	; 0x126 <main+0x24>
 288:	8f e1       	ldi	r24, 0x1F	; 31
 28a:	9e e4       	ldi	r25, 0x4E	; 78
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x18a>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x190>
 292:	00 00       	nop
			{
				_delay_ms(10);
				if (PINC_0)
 294:	98 9b       	sbis	0x13, 0	; 19
 296:	06 c0       	rjmp	.+12     	; 0x2a4 <main+0x1a2>
				{
					usart_putstr("118+\r");
 298:	84 eb       	ldi	r24, 0xB4	; 180
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				else
				{
					usart_putstr("118-\r");
				}
				transmission=0;
 2a0:	8c 2f       	mov	r24, r28
 2a2:	41 cf       	rjmp	.-382    	; 0x126 <main+0x24>
				{
					usart_putstr("118+\r");
				}
				else
				{
					usart_putstr("118-\r");
 2a4:	8a eb       	ldi	r24, 0xBA	; 186
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				transmission=0;
 2ac:	8c 2f       	mov	r24, r28
 2ae:	3b cf       	rjmp	.-394    	; 0x126 <main+0x24>
			}
		}
		else if (PINB_0)
 2b0:	b0 9b       	sbis	0x16, 0	; 22
 2b2:	17 c0       	rjmp	.+46     	; 0x2e2 <main+0x1e0>
		{
			if (transmission)
 2b4:	88 23       	and	r24, r24
 2b6:	09 f4       	brne	.+2      	; 0x2ba <main+0x1b8>
 2b8:	36 cf       	rjmp	.-404    	; 0x126 <main+0x24>
 2ba:	8f e1       	ldi	r24, 0x1F	; 31
 2bc:	9e e4       	ldi	r25, 0x4E	; 78
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x1bc>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x1c2>
 2c4:	00 00       	nop
			{
				_delay_ms(10);
				if (PINB_1)
 2c6:	b1 9b       	sbis	0x16, 1	; 22
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <main+0x1d4>
				{
					usart_putstr("119+\r");
 2ca:	80 ec       	ldi	r24, 0xC0	; 192
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				else
				{
					usart_putstr("119-\r");
				}
				transmission=0;
 2d2:	8c 2f       	mov	r24, r28
 2d4:	28 cf       	rjmp	.-432    	; 0x126 <main+0x24>
				{
					usart_putstr("119+\r");
				}
				else
				{
					usart_putstr("119-\r");
 2d6:	86 ec       	ldi	r24, 0xC6	; 198
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				transmission=0;
 2de:	8c 2f       	mov	r24, r28
 2e0:	22 cf       	rjmp	.-444    	; 0x126 <main+0x24>
			}
		}
		else if (PINB_2)
 2e2:	b2 9b       	sbis	0x16, 2	; 22
 2e4:	1f cf       	rjmp	.-450    	; 0x124 <main+0x22>
		{
			if (transmission)
 2e6:	88 23       	and	r24, r24
 2e8:	09 f4       	brne	.+2      	; 0x2ec <main+0x1ea>
 2ea:	1d cf       	rjmp	.-454    	; 0x126 <main+0x24>
 2ec:	8f e1       	ldi	r24, 0x1F	; 31
 2ee:	9e e4       	ldi	r25, 0x4E	; 78
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <main+0x1ee>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0x1f4>
 2f6:	00 00       	nop
			{
				_delay_ms(10);
				if (PINB_3)
 2f8:	b3 9b       	sbis	0x16, 3	; 22
 2fa:	06 c0       	rjmp	.+12     	; 0x308 <main+0x206>
				{
					usart_putstr("120+\r");
 2fc:	8c ec       	ldi	r24, 0xCC	; 204
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				else
				{
					usart_putstr("120-\r");
				}
				transmission=0;
 304:	8c 2f       	mov	r24, r28
 306:	0f cf       	rjmp	.-482    	; 0x126 <main+0x24>
				{
					usart_putstr("120+\r");
				}
				else
				{
					usart_putstr("120-\r");
 308:	82 ed       	ldi	r24, 0xD2	; 210
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 72 00 	call	0xe4	; 0xe4 <usart_putstr>
				}
				transmission=0;
 310:	8c 2f       	mov	r24, r28
 312:	09 cf       	rjmp	.-494    	; 0x126 <main+0x24>

00000314 <__floatunsisf>:
 314:	e8 94       	clt
 316:	09 c0       	rjmp	.+18     	; 0x32a <__floatsisf+0x12>

00000318 <__floatsisf>:
 318:	97 fb       	bst	r25, 7
 31a:	3e f4       	brtc	.+14     	; 0x32a <__floatsisf+0x12>
 31c:	90 95       	com	r25
 31e:	80 95       	com	r24
 320:	70 95       	com	r23
 322:	61 95       	neg	r22
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	8f 4f       	sbci	r24, 0xFF	; 255
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	99 23       	and	r25, r25
 32c:	a9 f0       	breq	.+42     	; 0x358 <__floatsisf+0x40>
 32e:	f9 2f       	mov	r31, r25
 330:	96 e9       	ldi	r25, 0x96	; 150
 332:	bb 27       	eor	r27, r27
 334:	93 95       	inc	r25
 336:	f6 95       	lsr	r31
 338:	87 95       	ror	r24
 33a:	77 95       	ror	r23
 33c:	67 95       	ror	r22
 33e:	b7 95       	ror	r27
 340:	f1 11       	cpse	r31, r1
 342:	f8 cf       	rjmp	.-16     	; 0x334 <__floatsisf+0x1c>
 344:	fa f4       	brpl	.+62     	; 0x384 <__floatsisf+0x6c>
 346:	bb 0f       	add	r27, r27
 348:	11 f4       	brne	.+4      	; 0x34e <__floatsisf+0x36>
 34a:	60 ff       	sbrs	r22, 0
 34c:	1b c0       	rjmp	.+54     	; 0x384 <__floatsisf+0x6c>
 34e:	6f 5f       	subi	r22, 0xFF	; 255
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	8f 4f       	sbci	r24, 0xFF	; 255
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	16 c0       	rjmp	.+44     	; 0x384 <__floatsisf+0x6c>
 358:	88 23       	and	r24, r24
 35a:	11 f0       	breq	.+4      	; 0x360 <__floatsisf+0x48>
 35c:	96 e9       	ldi	r25, 0x96	; 150
 35e:	11 c0       	rjmp	.+34     	; 0x382 <__floatsisf+0x6a>
 360:	77 23       	and	r23, r23
 362:	21 f0       	breq	.+8      	; 0x36c <__floatsisf+0x54>
 364:	9e e8       	ldi	r25, 0x8E	; 142
 366:	87 2f       	mov	r24, r23
 368:	76 2f       	mov	r23, r22
 36a:	05 c0       	rjmp	.+10     	; 0x376 <__floatsisf+0x5e>
 36c:	66 23       	and	r22, r22
 36e:	71 f0       	breq	.+28     	; 0x38c <__floatsisf+0x74>
 370:	96 e8       	ldi	r25, 0x86	; 134
 372:	86 2f       	mov	r24, r22
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	2a f0       	brmi	.+10     	; 0x384 <__floatsisf+0x6c>
 37a:	9a 95       	dec	r25
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	88 1f       	adc	r24, r24
 382:	da f7       	brpl	.-10     	; 0x37a <__floatsisf+0x62>
 384:	88 0f       	add	r24, r24
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	97 f9       	bld	r25, 7
 38c:	08 95       	ret

0000038e <lrint>:
 38e:	41 d0       	rcall	.+130    	; 0x412 <__fp_splitA>
 390:	a8 f1       	brcs	.+106    	; 0x3fc <lrint+0x6e>
 392:	9e 57       	subi	r25, 0x7E	; 126
 394:	a8 f1       	brcs	.+106    	; 0x400 <lrint+0x72>
 396:	98 51       	subi	r25, 0x18	; 24
 398:	60 f0       	brcs	.+24     	; 0x3b2 <lrint+0x24>
 39a:	39 f1       	breq	.+78     	; 0x3ea <lrint+0x5c>
 39c:	98 30       	cpi	r25, 0x08	; 8
 39e:	70 f5       	brcc	.+92     	; 0x3fc <lrint+0x6e>
 3a0:	09 2e       	mov	r0, r25
 3a2:	99 27       	eor	r25, r25
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	88 1f       	adc	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	0a 94       	dec	r0
 3ae:	d1 f7       	brne	.-12     	; 0x3a4 <lrint+0x16>
 3b0:	1c c0       	rjmp	.+56     	; 0x3ea <lrint+0x5c>
 3b2:	bb 27       	eor	r27, r27
 3b4:	99 3f       	cpi	r25, 0xF9	; 249
 3b6:	4c f4       	brge	.+18     	; 0x3ca <lrint+0x3c>
 3b8:	b1 11       	cpse	r27, r1
 3ba:	b1 e0       	ldi	r27, 0x01	; 1
 3bc:	b6 2b       	or	r27, r22
 3be:	67 2f       	mov	r22, r23
 3c0:	78 2f       	mov	r23, r24
 3c2:	88 27       	eor	r24, r24
 3c4:	98 5f       	subi	r25, 0xF8	; 248
 3c6:	b1 f7       	brne	.-20     	; 0x3b4 <lrint+0x26>
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <lrint+0x4c>
 3ca:	86 95       	lsr	r24
 3cc:	77 95       	ror	r23
 3ce:	67 95       	ror	r22
 3d0:	b7 95       	ror	r27
 3d2:	08 f4       	brcc	.+2      	; 0x3d6 <lrint+0x48>
 3d4:	b1 60       	ori	r27, 0x01	; 1
 3d6:	93 95       	inc	r25
 3d8:	c1 f7       	brne	.-16     	; 0x3ca <lrint+0x3c>
 3da:	bb 0f       	add	r27, r27
 3dc:	30 f4       	brcc	.+12     	; 0x3ea <lrint+0x5c>
 3de:	11 f4       	brne	.+4      	; 0x3e4 <lrint+0x56>
 3e0:	60 ff       	sbrs	r22, 0
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <lrint+0x5c>
 3e4:	6f 5f       	subi	r22, 0xFF	; 255
 3e6:	7f 4f       	sbci	r23, 0xFF	; 255
 3e8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ea:	3e f4       	brtc	.+14     	; 0x3fa <lrint+0x6c>
 3ec:	90 95       	com	r25
 3ee:	80 95       	com	r24
 3f0:	70 95       	com	r23
 3f2:	61 95       	neg	r22
 3f4:	7f 4f       	sbci	r23, 0xFF	; 255
 3f6:	8f 4f       	sbci	r24, 0xFF	; 255
 3f8:	9f 4f       	sbci	r25, 0xFF	; 255
 3fa:	08 95       	ret
 3fc:	68 94       	set
 3fe:	24 c0       	rjmp	.+72     	; 0x448 <__fp_szero>
 400:	22 c0       	rjmp	.+68     	; 0x446 <__fp_zero>

00000402 <__fp_split3>:
 402:	57 fd       	sbrc	r21, 7
 404:	90 58       	subi	r25, 0x80	; 128
 406:	44 0f       	add	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	59 f0       	breq	.+22     	; 0x422 <__fp_splitA+0x10>
 40c:	5f 3f       	cpi	r21, 0xFF	; 255
 40e:	71 f0       	breq	.+28     	; 0x42c <__fp_splitA+0x1a>
 410:	47 95       	ror	r20

00000412 <__fp_splitA>:
 412:	88 0f       	add	r24, r24
 414:	97 fb       	bst	r25, 7
 416:	99 1f       	adc	r25, r25
 418:	61 f0       	breq	.+24     	; 0x432 <__fp_splitA+0x20>
 41a:	9f 3f       	cpi	r25, 0xFF	; 255
 41c:	79 f0       	breq	.+30     	; 0x43c <__fp_splitA+0x2a>
 41e:	87 95       	ror	r24
 420:	08 95       	ret
 422:	12 16       	cp	r1, r18
 424:	13 06       	cpc	r1, r19
 426:	14 06       	cpc	r1, r20
 428:	55 1f       	adc	r21, r21
 42a:	f2 cf       	rjmp	.-28     	; 0x410 <__fp_split3+0xe>
 42c:	46 95       	lsr	r20
 42e:	f1 df       	rcall	.-30     	; 0x412 <__fp_splitA>
 430:	08 c0       	rjmp	.+16     	; 0x442 <__fp_splitA+0x30>
 432:	16 16       	cp	r1, r22
 434:	17 06       	cpc	r1, r23
 436:	18 06       	cpc	r1, r24
 438:	99 1f       	adc	r25, r25
 43a:	f1 cf       	rjmp	.-30     	; 0x41e <__fp_splitA+0xc>
 43c:	86 95       	lsr	r24
 43e:	71 05       	cpc	r23, r1
 440:	61 05       	cpc	r22, r1
 442:	08 94       	sec
 444:	08 95       	ret

00000446 <__fp_zero>:
 446:	e8 94       	clt

00000448 <__fp_szero>:
 448:	bb 27       	eor	r27, r27
 44a:	66 27       	eor	r22, r22
 44c:	77 27       	eor	r23, r23
 44e:	cb 01       	movw	r24, r22
 450:	97 f9       	bld	r25, 7
 452:	08 95       	ret

00000454 <__udivmodsi4>:
 454:	a1 e2       	ldi	r26, 0x21	; 33
 456:	1a 2e       	mov	r1, r26
 458:	aa 1b       	sub	r26, r26
 45a:	bb 1b       	sub	r27, r27
 45c:	fd 01       	movw	r30, r26
 45e:	0d c0       	rjmp	.+26     	; 0x47a <__udivmodsi4_ep>

00000460 <__udivmodsi4_loop>:
 460:	aa 1f       	adc	r26, r26
 462:	bb 1f       	adc	r27, r27
 464:	ee 1f       	adc	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	a2 17       	cp	r26, r18
 46a:	b3 07       	cpc	r27, r19
 46c:	e4 07       	cpc	r30, r20
 46e:	f5 07       	cpc	r31, r21
 470:	20 f0       	brcs	.+8      	; 0x47a <__udivmodsi4_ep>
 472:	a2 1b       	sub	r26, r18
 474:	b3 0b       	sbc	r27, r19
 476:	e4 0b       	sbc	r30, r20
 478:	f5 0b       	sbc	r31, r21

0000047a <__udivmodsi4_ep>:
 47a:	66 1f       	adc	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	88 1f       	adc	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	1a 94       	dec	r1
 484:	69 f7       	brne	.-38     	; 0x460 <__udivmodsi4_loop>
 486:	60 95       	com	r22
 488:	70 95       	com	r23
 48a:	80 95       	com	r24
 48c:	90 95       	com	r25
 48e:	9b 01       	movw	r18, r22
 490:	ac 01       	movw	r20, r24
 492:	bd 01       	movw	r22, r26
 494:	cf 01       	movw	r24, r30
 496:	08 95       	ret

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
